var searchIndex = new Map(JSON.parse('[\
["compilo",{"doc":"","t":"CCHCCHCCHPPPPPPPPPPPFGPPPPPPPPPGPPPPPPPNNNNNNNNONNNNOONNNNNNNNNNNONNNNNNNNNNPFPPGPPOONNNNNNHNNNHHONNOOHHHNNNNNNOOOOOOOOOPPPPGPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPGPPPPGPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNNNNNHNNNNNNNNNNNNNNNPPGPPHNNHHHNNNNHHHHHHHNNNPGPPPPPPPPPPPPGPPGPFFPPPNNNNNNNNNNOOONNNNOONNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOPGPPNNHNNHNNNNNNHOOO","n":["errors","eval","main","parser","preprocessor","run_main","structs","ternary","test_parser","DefinedChildNotLeaf","DefinedChildNotMacro","DirectiveError","DirectiveNameMissing","DirectiveUnknown","DirectiveWarning","ElifWithoutIf","ElseWithoutIf","EndifWithoutIf","FileNotFound","FileNotReadable","FilePosition","GeneralError","IncompleteOperator","InvalidFileName","InvalidLeaf","InvalidMaxcroName","InvalidOperator","InvalidSharpPosition","MacroArgsNotClosed","MacroNotDefined","MainNotFound","PreprocessorError","StringsNotAllowed","UnclosedBrace","UnclosedBracket","UnclosedChar","UnclosedComment","UnclosedParenthesis","UnclosedString","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","col","default","fail","fail","fail_with_panic","filename","filepath","fmt","fmt","fmt","from","from","from","get_code","get_code","into","into","into","line","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BinaryOperator","CurrentTree","Empty","Leaf","PreprocessorAst","TernaryOperator","UnaryOperator","acc","acc3","borrow","borrow","borrow_mut","borrow_mut","default","eq","eval_one","fmt","from","from","go_back_in_tokens","handle_binary","index","into","into","previous_operator","tokens","tokens_to_ast","tokens_to_ast_impl","tokens_to_ast_impl_or_acc3","try_from","try_from","try_into","try_into","type_id","type_id","center","child","left","left","operator","operator","operator","right","right","Add","AddAssign","And","AndAssign","Associativity","BitwiseAnd","BitwiseNot","BitwiseOr","BitwiseXor","Bracing","Bracing","Colon","Conditional","Decrement","Defined","Div","DivAssign","Eequal","GreaterEqual","GreaterThan","Increment","Interrogation","LeftBrace","LeftBracket","LeftParenthesis","LeftToRight","LessEqual","LessThan","LiteralNumber","LiteralString","Macro","Minus","Mod","ModAssign","Mul","MulAssign","NonOpSymbol","NonOpSymbol","Not","NotEqual","Operator","Operator","Or","OrAssign","Plus","PreprocessorToken","RightBrace","RightBracket","RightParenthesis","RightToLeft","ShiftLeft","ShiftLeftAssign","ShiftRight","ShiftRightAssign","Sub","SubAssign","XorAssign","associativity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","is_not_operator","max_precedence","parse_preprocessor","precedence","to_owned","to_owned","to_owned","to_owned","token_from_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AfterName","Args","DirectiveParsingState","Name","Value","add_default_macro","borrow","borrow_mut","convert_define_from_store","convert_from_store","deal_with_c","eq","fmt","from","into","look_for_file","preprocess","preprocess_character","preprocess_define","preprocess_directive","preprocess_include","preprocess_unit","try_from","try_into","type_id","Define","Directive","DirectiveArgs","DirectiveName","DirectiveValue","Elif","Else","EndIf","Error","Function","If","IfDef","IfnDef","Include","MacroValue","None","None","Pips","Pragma","State","StoreDirective","String","Undef","Warning","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","comment_level","comment_unclosed_positon","current_position","default","default","default","default","defines","directive_parsing","end_file","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","if_level","if_writing","include_stack","inline_comment","into","into","into","into","into","new_file","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values","expression","expression","filename","macro_args","macro_name","macro_name","macro_name","macro_name","macro_value","message","message","message","args","body","Empty","FullAst","Leaf","Node","borrow","borrow_mut","eval_all","fmt","from","get_second_third","into","push","push_end","try_from","try_into","type_id","vec2ternary_ast","first","second","third"],"q":[[0,"compilo"],[9,"compilo::errors"],[76,"compilo::eval"],[111,"compilo::eval::PreprocessorAst"],[120,"compilo::parser"],[239,"compilo::preprocessor"],[264,"compilo::structs"],[345,"compilo::structs::Directive"],[357,"compilo::structs::MacroValue"],[359,"compilo::ternary"],[376,"compilo::ternary::FullAst"],[379,"std::io::error"],[380,"alloc::string"],[381,"core::fmt"],[382,"core::fmt"],[383,"core::any"],[384,"core::option"],[385,"alloc::vec"],[386,"alloc::boxed"],[387,"std::fs"],[388,"std::path"],[389,"alloc::vec::into_iter"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Preprocessor Directive Parsing State","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,7,5,0,7,5,5,5,5,5,5,4,5,7,4,5,7,4,4,4,4,5,7,7,4,4,4,5,7,4,5,7,5,7,4,5,7,4,4,4,5,7,4,5,7,4,5,7,14,0,14,14,0,14,14,18,18,18,14,18,14,14,14,0,14,18,14,0,0,18,18,14,18,18,0,0,0,18,14,18,14,18,14,38,39,38,40,38,40,39,38,40,19,19,19,19,0,19,19,19,19,0,22,27,19,19,19,19,19,19,19,19,19,27,26,26,26,25,19,19,22,22,22,19,19,19,19,19,0,22,19,19,0,22,19,19,19,0,26,26,26,25,19,19,19,19,19,19,19,19,19,25,26,27,22,19,25,26,27,22,19,26,27,22,19,26,27,22,19,25,26,27,22,19,26,27,22,19,25,26,27,22,19,25,26,27,22,0,19,0,19,19,26,27,22,0,19,25,26,27,22,19,25,26,27,22,19,25,26,27,22,31,31,0,31,31,0,31,31,0,0,0,31,31,31,31,0,0,0,0,0,0,0,31,31,31,29,0,34,34,34,29,29,29,29,35,29,29,29,29,0,34,29,0,29,0,0,35,29,29,34,30,29,16,35,34,30,29,16,35,16,16,16,34,30,29,16,16,16,16,34,34,30,29,16,35,34,30,29,16,35,16,16,16,16,34,30,29,16,35,16,34,30,29,16,35,34,30,29,16,35,34,30,29,16,35,30,41,42,43,44,44,45,46,47,44,48,49,50,51,51,36,0,36,36,36,36,0,36,36,0,36,36,36,36,36,36,0,52,52,52],"f":[0,0,[[],1],0,0,[2,[[3,[1]]]],0,0,[2,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],1,[],[]],0,[[],4],[[5,4],6],[[7,4],6],[[7,4],8],0,0,[[4,9],10],[[5,9],10],[[7,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[1,[11,6]]]],[7,[[1,[11,6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[14,14],15],[[14,16],17],[[14,9],10],[-1,-1,[]],[-1,-1,[]],[[18,4,[20,[19]]],14],[[18,4,19,11,21],14],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[23,[22]],4],14],[[[23,[22]],21,14,[24,[14]],[20,[19]],4,21],14],[[[23,[22]],21,14,[24,[14]],[20,[19]],4,21],14],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[26,26],[27,27],[22,22],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[19,19],15],[[25,25],15],[[26,26],15],[[27,27],15],[[22,22],15],[[19,9],10],[[26,9],10],[[27,9],10],[[22,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,15],[[],11],[2,[[23,[22]]]],[19,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[20,[22]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,[16,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,29],[[30,16],29],[[28,16,30],6],[[31,31],15],[[31,9],10],[-1,-1,[]],[-1,-2,[],[]],[[6,16],32],[[2,16],6],[[28,16,28,30],6],[[29,16],6],[[29,16],6],[[6,16],6],[33,6],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],34],[[],30],[[],29],[[],16],0,0,[16,1],[[34,34],15],[[34,9],10],[[30,9],10],[[29,9],10],[[16,9],10],[[35,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,6,6],1],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[36,16],17],[[36,9],10],[-1,-1,[]],[[[37,[22]]],[[1,[[23,[22]],[23,[22]]]]]],[-1,-2,[],[]],[[36,[23,[22]],[23,[22]],36],1],[[36,[23,[22]]],1],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[23,[22]]],36],0,0,0],"c":[],"p":[[1,"tuple"],[1,"str"],[8,"Result",379],[5,"FilePosition",9],[6,"GeneralError",9],[5,"String",380],[6,"PreprocessorError",9],[1,"never"],[5,"Formatter",381],[8,"Result",381],[1,"u32"],[6,"Result",382],[5,"TypeId",383],[6,"PreprocessorAst",76],[1,"bool"],[5,"State",264],[1,"i32"],[5,"CurrentTree",76],[6,"Operator",120],[6,"Option",384],[1,"usize"],[6,"PreprocessorToken",120],[5,"Vec",385],[5,"Box",386],[6,"Associativity",120],[6,"Bracing",120],[6,"NonOpSymbol",120],[1,"char"],[6,"Directive",264],[5,"StoreDirective",264],[6,"DirectiveParsingState",239],[5,"File",387],[5,"PathBuf",388],[6,"Pips",264],[6,"MacroValue",264],[6,"FullAst",359],[5,"IntoIter",389],[15,"TernaryOperator",111],[15,"UnaryOperator",111],[15,"BinaryOperator",111],[15,"If",345],[15,"Elif",345],[15,"Include",345],[15,"Define",345],[15,"IfDef",345],[15,"IfnDef",345],[15,"Undef",345],[15,"Warning",345],[15,"Pragma",345],[15,"Error",345],[15,"Function",357],[15,"Node",376]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
