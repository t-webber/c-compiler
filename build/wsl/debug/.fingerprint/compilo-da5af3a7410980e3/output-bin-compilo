{"$message_type":"diagnostic","message":"package `compilo` is missing `package.description` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::cargo-common-metadata` implied by `-W clippy::cargo`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::cargo` add `#[allow(clippy::cargo_common_metadata)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `package.description` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cargo-common-metadata` implied by `-W clippy::cargo`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::cargo` add `#[allow(clippy::cargo_common_metadata)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"package `compilo` is missing `either package.license or package.license_file` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `either package.license or package.license_file` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"package `compilo` is missing `package.repository` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `package.repository` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"package `compilo` is missing `package.readme` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `package.readme` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"package `compilo` is missing `package.keywords` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `package.keywords` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"package `compilo` is missing `package.categories` metadata","code":{"code":"clippy::cargo_common_metadata","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: package `compilo` is missing `package.categories` metadata\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many lines (174/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/eval.rs","byte_start":3931,"byte_end":15475,"line_start":123,"line_end":392,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn tokens_to_ast_impl(","highlight_start":1,"highlight_end":23},{"text":"    tokens: &Vec<PreprocessorToken>,","highlight_start":1,"highlight_end":37},{"text":"    index: &mut usize,","highlight_start":1,"highlight_end":23},{"text":"    acc: PreprocessorAst,","highlight_start":1,"highlight_end":26},{"text":"    acc3: &mut Box<PreprocessorAst>,","highlight_start":1,"highlight_end":37},{"text":"    previous_operator: Option<&Operator>,","highlight_start":1,"highlight_end":42},{"text":"    current_position: &mut FilePosition,","highlight_start":1,"highlight_end":41},{"text":"    parenthesis_level: &mut usize,","highlight_start":1,"highlight_end":35},{"text":") -> PreprocessorAst {","highlight_start":1,"highlight_end":23},{"text":"    // eprintln!(","highlight_start":1,"highlight_end":18},{"text":"        // \"T = {:?}\\nI = {:?}\\nA = {:?}\\nA3 = {:?}\\nPrev = {:?}\\nPlvl = {:?}\\n\\n\\n\\n\",","highlight_start":1,"highlight_end":88},{"text":"        // &tokens, &index, &acc, &acc3, &previous_operator, &parenthesis_level","highlight_start":1,"highlight_end":80},{"text":"    // );","highlight_start":1,"highlight_end":10},{"text":"    let previous_precedence = if let Some(previous_op) = previous_operator {","highlight_start":1,"highlight_end":77},{"text":"        previous_op.precedence()","highlight_start":1,"highlight_end":33},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        Operator::max_precedence()","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    // let previous_associativity = if let Some(previous_op) = previous_operator {","highlight_start":1,"highlight_end":83},{"text":"    //     previous_op.associativity()","highlight_start":1,"highlight_end":39},{"text":"    // } else { Associativity::LeftToRight };","highlight_start":1,"highlight_end":46},{"text":"    if let Some(token) = tokens.get(*index) {","highlight_start":1,"highlight_end":46},{"text":"        *index += 1;","highlight_start":1,"highlight_end":21},{"text":"        match token {","highlight_start":1,"highlight_end":22},{"text":"            PreprocessorToken::Operator(operator) => match operator {","highlight_start":1,"highlight_end":70},{"text":"                // Invalid","highlight_start":1,"highlight_end":27},{"text":"                Operator::Increment","highlight_start":1,"highlight_end":36},{"text":"                | Operator::Decrement","highlight_start":1,"highlight_end":38},{"text":"                | Operator::AddAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::SubAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::MulAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::DivAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::ModAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::OrAssign","highlight_start":1,"highlight_end":37},{"text":"                | Operator::AndAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::XorAssign","highlight_start":1,"highlight_end":38},{"text":"                | Operator::ShiftLeftAssign","highlight_start":1,"highlight_end":44},{"text":"                | Operator::ShiftRightAssign => {","highlight_start":1,"highlight_end":50},{"text":"                    PreprocessorError::InvalidOperator(&format!(\"{operator:?}\"))","highlight_start":1,"highlight_end":81},{"text":"                        .fail_with_panic(current_position)","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                // Unary","highlight_start":1,"highlight_end":25},{"text":"                Operator::Plus | Operator::Minus => {","highlight_start":1,"highlight_end":54},{"text":"                    // False unary","highlight_start":1,"highlight_end":35},{"text":"                    if acc == PreprocessorAst::Empty {","highlight_start":1,"highlight_end":55},{"text":"                        // In this case, we have for example","highlight_start":1,"highlight_end":61},{"text":"                        // acc + -b","highlight_start":1,"highlight_end":36},{"text":"                        let child = tokens_to_ast_impl(","highlight_start":1,"highlight_end":56},{"text":"                            tokens,","highlight_start":1,"highlight_end":36},{"text":"                            index,","highlight_start":1,"highlight_end":35},{"text":"                            acc,","highlight_start":1,"highlight_end":33},{"text":"                            acc3,","highlight_start":1,"highlight_end":34},{"text":"                            Some(operator),","highlight_start":1,"highlight_end":44},{"text":"                            current_position,","highlight_start":1,"highlight_end":46},{"text":"                            parenthesis_level,","highlight_start":1,"highlight_end":47},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        PreprocessorAst::UnaryOperator {","highlight_start":1,"highlight_end":57},{"text":"                            operator: operator.clone(),","highlight_start":1,"highlight_end":56},{"text":"                            child: Box::new(child),","highlight_start":1,"highlight_end":52},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        let current_operator = match operator {","highlight_start":1,"highlight_end":64},{"text":"                            Operator::Plus => Operator::Add,","highlight_start":1,"highlight_end":61},{"text":"                            Operator::Minus => Operator::Sub,","highlight_start":1,"highlight_end":62},{"text":"                            _ => panic!(\"Catastrophic\"),","highlight_start":1,"highlight_end":57},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        handle_binary(","highlight_start":1,"highlight_end":39},{"text":"                            CurrentTree {","highlight_start":1,"highlight_end":42},{"text":"                                tokens,","highlight_start":1,"highlight_end":40},{"text":"                                index,","highlight_start":1,"highlight_end":39},{"text":"                                acc,","highlight_start":1,"highlight_end":37},{"text":"                                acc3,","highlight_start":1,"highlight_end":38},{"text":"                                previous_operator,","highlight_start":1,"highlight_end":51},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                            current_position,","highlight_start":1,"highlight_end":46},{"text":"                            &current_operator,","highlight_start":1,"highlight_end":47},{"text":"                            previous_precedence,","highlight_start":1,"highlight_end":49},{"text":"                            parenthesis_level,","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Operator::Not | Operator::BitwiseNot | Operator::Defined => {","highlight_start":1,"highlight_end":78},{"text":"                    if operator.precedence() > previous_precedence {","highlight_start":1,"highlight_end":69},{"text":"                        // In this case, the only possibilities are:","highlight_start":1,"highlight_end":69},{"text":"                        //  defined !MACRO","highlight_start":1,"highlight_end":43},{"text":"                        //  defined ~MACRO","highlight_start":1,"highlight_end":43},{"text":"                        PreprocessorError::DefinedChildNotMacro.fail_with_panic(current_position)","highlight_start":1,"highlight_end":98},{"text":"                    } else if acc == PreprocessorAst::Empty {","highlight_start":1,"highlight_end":62},{"text":"                        // Here acc is empty","highlight_start":1,"highlight_end":45},{"text":"                        // We need to stop as soon as we reach an operator","highlight_start":1,"highlight_end":75},{"text":"                        // which precedence is higher than ours","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        // child contains the content of the unary operator","highlight_start":1,"highlight_end":76},{"text":"                        let child = tokens_to_ast_impl(","highlight_start":1,"highlight_end":56},{"text":"                            tokens,","highlight_start":1,"highlight_end":36},{"text":"                            index,","highlight_start":1,"highlight_end":35},{"text":"                            PreprocessorAst::Empty,","highlight_start":1,"highlight_end":52},{"text":"                            &mut Box::new(PreprocessorAst::Empty),","highlight_start":1,"highlight_end":67},{"text":"                            Some(operator),","highlight_start":1,"highlight_end":44},{"text":"                            current_position,","highlight_start":1,"highlight_end":46},{"text":"                            parenthesis_level,","highlight_start":1,"highlight_end":47},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        let unary_operator = PreprocessorAst::UnaryOperator {","highlight_start":1,"highlight_end":78},{"text":"                            operator: operator.clone(),","highlight_start":1,"highlight_end":56},{"text":"                            child: Box::new(child),","highlight_start":1,"highlight_end":52},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        // We use the precedence we received because of associativity","highlight_start":1,"highlight_end":86},{"text":"                        tokens_to_ast_impl_or_acc3(","highlight_start":1,"highlight_end":52},{"text":"                            tokens,","highlight_start":1,"highlight_end":36},{"text":"                            index,","highlight_start":1,"highlight_end":35},{"text":"                            unary_operator,","highlight_start":1,"highlight_end":44},{"text":"                            acc3,","highlight_start":1,"highlight_end":34},{"text":"                            previous_operator,","highlight_start":1,"highlight_end":47},{"text":"                            current_position,","highlight_start":1,"highlight_end":46},{"text":"                            parenthesis_level,","highlight_start":1,"highlight_end":47},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        // We were in a situation like","highlight_start":1,"highlight_end":55},{"text":"                        // a!b + ... : we read !","highlight_start":1,"highlight_end":49},{"text":"                        PreprocessorError::IncompleteOperator(&format!(\"{operator:?}\"))","highlight_start":1,"highlight_end":88},{"text":"                            .fail_with_panic(current_position)","highlight_start":1,"highlight_end":63},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Binary","highlight_start":1,"highlight_end":26},{"text":"                Operator::BitwiseAnd","highlight_start":1,"highlight_end":37},{"text":"                | Operator::BitwiseOr","highlight_start":1,"highlight_end":38},{"text":"                | Operator::BitwiseXor","highlight_start":1,"highlight_end":39},{"text":"                | Operator::And","highlight_start":1,"highlight_end":32},{"text":"                | Operator::Or","highlight_start":1,"highlight_end":31},{"text":"                | Operator::ShiftLeft","highlight_start":1,"highlight_end":38},{"text":"                | Operator::ShiftRight","highlight_start":1,"highlight_end":39},{"text":"                | Operator::NotEqual","highlight_start":1,"highlight_end":37},{"text":"                | Operator::Eequal","highlight_start":1,"highlight_end":35},{"text":"                | Operator::LessThan","highlight_start":1,"highlight_end":37},{"text":"                | Operator::GreaterThan","highlight_start":1,"highlight_end":40},{"text":"                | Operator::LessEqual","highlight_start":1,"highlight_end":38},{"text":"                | Operator::GreaterEqual","highlight_start":1,"highlight_end":41},{"text":"                | Operator::Add","highlight_start":1,"highlight_end":32},{"text":"                | Operator::Sub","highlight_start":1,"highlight_end":32},{"text":"                | Operator::Mul","highlight_start":1,"highlight_end":32},{"text":"                | Operator::Div","highlight_start":1,"highlight_end":32},{"text":"                | Operator::Mod => handle_binary(","highlight_start":1,"highlight_end":50},{"text":"                    CurrentTree {","highlight_start":1,"highlight_end":34},{"text":"                        tokens,","highlight_start":1,"highlight_end":32},{"text":"                        index,","highlight_start":1,"highlight_end":31},{"text":"                        acc,","highlight_start":1,"highlight_end":29},{"text":"                        acc3,","highlight_start":1,"highlight_end":30},{"text":"                        previous_operator,","highlight_start":1,"highlight_end":43},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    current_position,","highlight_start":1,"highlight_end":38},{"text":"                    operator,","highlight_start":1,"highlight_end":30},{"text":"                    previous_precedence,","highlight_start":1,"highlight_end":41},{"text":"                    parenthesis_level,","highlight_start":1,"highlight_end":39},{"text":"                ),","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // Ternary","highlight_start":1,"highlight_end":27},{"text":"                Operator::Conditional => panic!(\"Not intented to be found in this scope\"),","highlight_start":1,"highlight_end":91},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            PreprocessorToken::Bracing(bracing) => match bracing {","highlight_start":1,"highlight_end":67},{"text":"                Bracing::LeftParenthesis => {","highlight_start":1,"highlight_end":46},{"text":"                    *parenthesis_level += 1;","highlight_start":1,"highlight_end":45},{"text":"                    let next = tokens_to_ast_impl(","highlight_start":1,"highlight_end":51},{"text":"                        tokens,","highlight_start":1,"highlight_end":32},{"text":"                        index,","highlight_start":1,"highlight_end":31},{"text":"                        PreprocessorAst::Empty,","highlight_start":1,"highlight_end":48},{"text":"                        &mut Box::new(PreprocessorAst::Empty),","highlight_start":1,"highlight_end":63},{"text":"                        None,","highlight_start":1,"highlight_end":30},{"text":"                        current_position,","highlight_start":1,"highlight_end":42},{"text":"                        parenthesis_level,","highlight_start":1,"highlight_end":43},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    tokens_to_ast_impl_or_acc3(","highlight_start":1,"highlight_end":48},{"text":"                        tokens,","highlight_start":1,"highlight_end":32},{"text":"                        index,","highlight_start":1,"highlight_end":31},{"text":"                        next,","highlight_start":1,"highlight_end":30},{"text":"                        acc3,","highlight_start":1,"highlight_end":30},{"text":"                        None,","highlight_start":1,"highlight_end":30},{"text":"                        current_position,","highlight_start":1,"highlight_end":42},{"text":"                        parenthesis_level,","highlight_start":1,"highlight_end":43},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                    // tokens_to_ast_impl(tokens, index, acc, acc3, None, current_position, parenthesis_level)","highlight_start":1,"highlight_end":111},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Bracing::RightParenthesis => {","highlight_start":1,"highlight_end":47},{"text":"                    // tokens_to_ast_impl(tokens, index, acc, acc3, None, current_position) // tout ce qu'il ne faut pas faire","highlight_start":1,"highlight_end":127},{"text":"                    *parenthesis_level -= 1;","highlight_start":1,"highlight_end":45},{"text":"                    // println!(\">>>>>>>>>>>>>>>>>>>>>>>>> {acc:?}\");","highlight_start":1,"highlight_end":70},{"text":"                    acc","highlight_start":1,"highlight_end":24},{"text":"                    // tokens_to_ast_impl(tokens, index, acc, acc3, previous_operator, current_position, parenthesis_level)","highlight_start":1,"highlight_end":124},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Bracing::LeftBracket","highlight_start":1,"highlight_end":37},{"text":"                | Bracing::RightBracket","highlight_start":1,"highlight_end":40},{"text":"                | Bracing::LeftBrace","highlight_start":1,"highlight_end":37},{"text":"                | Bracing::RightBrace => {","highlight_start":1,"highlight_end":43},{"text":"                    PreprocessorError::InvalidOperator(&format!(\"{bracing:?}\"))","highlight_start":1,"highlight_end":80},{"text":"                        .fail_with_panic(current_position)","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            PreprocessorToken::NonOpSymbol(symbol) => panic!(\"Mmmmmmmmmmmmmmmmmmhhhhhhhhhhhhhhhhhhhhhhhhh\"),","highlight_start":1,"highlight_end":109},{"text":"                // match symbol {","highlight_start":1,"highlight_end":34},{"text":"                // NonOpSymbol::Interrogation => {","highlight_start":1,"highlight_end":51},{"text":"                //     *acc3 = Box::new(acc);","highlight_start":1,"highlight_end":46},{"text":"                //     dbg!(&acc3);","highlight_start":1,"highlight_end":36},{"text":"                //     // PreprocessorAst::Empty","highlight_start":1,"highlight_end":49},{"text":"                //     tokens_to_ast_impl(","highlight_start":1,"highlight_end":43},{"text":"                //         tokens,","highlight_start":1,"highlight_end":35},{"text":"                //         index,","highlight_start":1,"highlight_end":34},{"text":"                //         PreprocessorAst::Empty,","highlight_start":1,"highlight_end":51},{"text":"                //         acc3,","highlight_start":1,"highlight_end":33},{"text":"                //         None,","highlight_start":1,"highlight_end":33},{"text":"                //         current_position,","highlight_start":1,"highlight_end":45},{"text":"                //         parenthesis_level,","highlight_start":1,"highlight_end":46},{"text":"                //     )","highlight_start":1,"highlight_end":25},{"text":"                // }","highlight_start":1,"highlight_end":21},{"text":"                // NonOpSymbol::Colon => {","highlight_start":1,"highlight_end":43},{"text":"                //     let current_parenthesis_level: usize = *parenthesis_level;","highlight_start":1,"highlight_end":82},{"text":"                //     let right = tokens_to_ast_impl(","highlight_start":1,"highlight_end":55},{"text":"                //         tokens,","highlight_start":1,"highlight_end":35},{"text":"                //         index,","highlight_start":1,"highlight_end":34},{"text":"                //         PreprocessorAst::Empty,","highlight_start":1,"highlight_end":51},{"text":"                //         &mut Box::new(PreprocessorAst::Empty),","highlight_start":1,"highlight_end":66},{"text":"                //         None,","highlight_start":1,"highlight_end":33},{"text":"                //         current_position,","highlight_start":1,"highlight_end":45},{"text":"                //         parenthesis_level,","highlight_start":1,"highlight_end":46},{"text":"                //     );","highlight_start":1,"highlight_end":26},{"text":"                //     dbg!(","highlight_start":1,"highlight_end":29},{"text":"                //         &acc3,","highlight_start":1,"highlight_end":34},{"text":"                //         &acc,","highlight_start":1,"highlight_end":33},{"text":"                //         &right,","highlight_start":1,"highlight_end":35},{"text":"                //         &current_parenthesis_level,","highlight_start":1,"highlight_end":55},{"text":"                //         &parenthesis_level,","highlight_start":1,"highlight_end":47},{"text":"                //         &current_position","highlight_start":1,"highlight_end":45},{"text":"                //     );","highlight_start":1,"highlight_end":26},{"text":"                //     let ternary_tree = PreprocessorAst::TernaryOperator {","highlight_start":1,"highlight_end":77},{"text":"                //         operator: Operator::Conditional,","highlight_start":1,"highlight_end":60},{"text":"                //         left: std::mem::take(acc3),","highlight_start":1,"highlight_end":55},{"text":"                //         center: Box::new(acc),","highlight_start":1,"highlight_end":50},{"text":"                //         right: Box::new(right),","highlight_start":1,"highlight_end":51},{"text":"                //     };","highlight_start":1,"highlight_end":26},{"text":"                //     if *parenthesis_level < current_parenthesis_level {","highlight_start":1,"highlight_end":75},{"text":"                //         ternary_tree","highlight_start":1,"highlight_end":40},{"text":"                //     } else {","highlight_start":1,"highlight_end":32},{"text":"                //         tokens_to_ast_impl_or_acc3(","highlight_start":1,"highlight_end":55},{"text":"                //             tokens,","highlight_start":1,"highlight_end":39},{"text":"                //             index,","highlight_start":1,"highlight_end":38},{"text":"                //             ternary_tree,","highlight_start":1,"highlight_end":45},{"text":"                //             &mut Box::new(PreprocessorAst::Empty),","highlight_start":1,"highlight_end":70},{"text":"                //             None,","highlight_start":1,"highlight_end":37},{"text":"                //             current_position,","highlight_start":1,"highlight_end":49},{"text":"                //             parenthesis_level,","highlight_start":1,"highlight_end":50},{"text":"                //         )","highlight_start":1,"highlight_end":29},{"text":"                //     }","highlight_start":1,"highlight_end":25},{"text":"                // }","highlight_start":1,"highlight_end":21},{"text":"            // },","highlight_start":1,"highlight_end":18},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                let macro_leaf = PreprocessorAst::Leaf(token.clone());","highlight_start":1,"highlight_end":71},{"text":"                tokens_to_ast_impl(","highlight_start":1,"highlight_end":36},{"text":"                    tokens,","highlight_start":1,"highlight_end":28},{"text":"                    index,","highlight_start":1,"highlight_end":27},{"text":"                    macro_leaf,","highlight_start":1,"highlight_end":32},{"text":"                    acc3,","highlight_start":1,"highlight_end":26},{"text":"                    previous_operator,","highlight_start":1,"highlight_end":39},{"text":"                    current_position,","highlight_start":1,"highlight_end":38},{"text":"                    parenthesis_level,","highlight_start":1,"highlight_end":39},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        acc","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::too-many-lines` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (174/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/eval.rs:123:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn tokens_to_ast_impl(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tokens: &Vec<PreprocessorToken>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    index: &mut usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    acc: PreprocessorAst,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m392\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use Option::map_or_else instead of an if let/else","code":{"code":"clippy::option_if_let_else","explanation":null},"level":"warning","spans":[{"file_name":"src/eval.rs","byte_start":4457,"byte_end":4594,"line_start":136,"line_end":140,"column_start":31,"column_end":6,"is_primary":true,"text":[{"text":"    let previous_precedence = if let Some(previous_op) = previous_operator {","highlight_start":31,"highlight_end":77},{"text":"        previous_op.precedence()","highlight_start":1,"highlight_end":33},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        Operator::max_precedence()","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::option-if-let-else` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/eval.rs","byte_start":4457,"byte_end":4594,"line_start":136,"line_end":140,"column_start":31,"column_end":6,"is_primary":true,"text":[{"text":"    let previous_precedence = if let Some(previous_op) = previous_operator {","highlight_start":31,"highlight_end":77},{"text":"        previous_op.precedence()","highlight_start":1,"highlight_end":33},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        Operator::max_precedence()","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"previous_operator.map_or_else(Operator::max_precedence, |previous_op| previous_op.precedence())","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use Option::map_or_else instead of an if let/else\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/eval.rs:136:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let previous_precedence = if let Some(previous_op) = previous_operator {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        previous_op.precedence()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Operator::max_precedence()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `previous_operator.map_or_else(Operator::max_precedence, |previous_op| previous_op.precedence())`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"item name starts with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/eval.rs","byte_start":20509,"byte_end":20517,"line_start":460,"line_end":460,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"pub fn eval_one(ast: &PreprocessorAst, state: &mut State) -> i32 {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::pedantic` add `#[allow(clippy::module_name_repetitions)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name starts with its containing module's name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/eval.rs:460:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn eval_one(ast: &PreprocessorAst, state: &mut State) -> i32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::pedantic` add `#[allow(clippy::module_name_repetitions)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you are deriving `PartialEq` and can implement `Eq`","code":{"code":"clippy::derive_partial_eq_without_eq","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":579,"byte_end":588,"line_start":38,"line_end":38,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, PartialEq)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::derive-partial-eq-without-eq` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::derive_partial_eq_without_eq)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider deriving `Eq` as well","code":null,"level":"help","spans":[{"file_name":"src/parser.rs","byte_start":579,"byte_end":588,"line_start":38,"line_end":38,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, PartialEq)]","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":"PartialEq, Eq","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you are deriving `PartialEq` and can implement `Eq`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:38:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Clone, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider deriving `Eq` as well: `PartialEq, Eq`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::derive-partial-eq-without-eq` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::derive_partial_eq_without_eq)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this could be a `const fn`","code":{"code":"clippy::missing_const_for_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":1301,"byte_end":1352,"line_start":90,"line_end":92,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn max_precedence() -> u32 {","highlight_start":5,"highlight_end":37},{"text":"        15","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this could be a `const fn`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:90:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn max_precedence() -> u32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        15\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this could be a `const fn`","code":{"code":"clippy::missing_const_for_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":1360,"byte_end":2719,"line_start":94,"line_end":142,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn precedence(&self) -> u32 {","highlight_start":5,"highlight_end":38},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Self::Defined => 0,","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::Increment | Self::Decrement => 1,","highlight_start":1,"highlight_end":52},{"text":"            // ()","highlight_start":1,"highlight_end":18},{"text":"            // []","highlight_start":1,"highlight_end":18},{"text":"            // . ->","highlight_start":1,"highlight_end":20},{"text":"            // (type){elt}","highlight_start":1,"highlight_end":27},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            // prefix increment / decrement","highlight_start":1,"highlight_end":44},{"text":"            Self::Plus | Self::Minus | Self::Not | Self::BitwiseNot => 2,","highlight_start":1,"highlight_end":74},{"text":"            // (cast)","highlight_start":1,"highlight_end":22},{"text":"            // * & sizeof _alignof","highlight_start":1,"highlight_end":35},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            Self::Mul | Self::Div | Self::Mod => 3,","highlight_start":1,"highlight_end":52},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            Self::Add | Self::Sub => 4,","highlight_start":1,"highlight_end":40},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            Self::ShiftLeft | Self::ShiftRight => 5,","highlight_start":1,"highlight_end":53},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            Self::LessThan | Self::LessEqual | Self::GreaterThan | Self::GreaterEqual => 6,","highlight_start":1,"highlight_end":92},{"text":"            //","highlight_start":1,"highlight_end":15},{"text":"            Self::Eequal | Self::NotEqual => 7,","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::BitwiseAnd => 8,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::BitwiseXor => 9,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::BitwiseOr => 10,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::And => 11,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::Or => 12,","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::Conditional => 13,","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Self::AddAssign","highlight_start":1,"highlight_end":28},{"text":"            | Self::SubAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::MulAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::DivAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::ModAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::OrAssign","highlight_start":1,"highlight_end":29},{"text":"            | Self::AndAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::XorAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::ShiftLeftAssign","highlight_start":1,"highlight_end":36},{"text":"            | Self::ShiftRightAssign => 14,","highlight_start":1,"highlight_end":44},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this could be a `const fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:94:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn precedence(&self) -> u32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Defined => 0,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this could be a `const fn`","code":{"code":"clippy::missing_const_for_fn","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":2727,"byte_end":3322,"line_start":144,"line_end":162,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn associativity(&self) -> Associativity {","highlight_start":5,"highlight_end":51},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Self::Plus","highlight_start":1,"highlight_end":23},{"text":"            | Self::Minus","highlight_start":1,"highlight_end":26},{"text":"            | Self::Not","highlight_start":1,"highlight_end":24},{"text":"            | Self::BitwiseNot","highlight_start":1,"highlight_end":31},{"text":"            | Self::Conditional","highlight_start":1,"highlight_end":32},{"text":"            | Self::AddAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::SubAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::DivAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::ModAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::OrAssign","highlight_start":1,"highlight_end":29},{"text":"            | Self::AndAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::XorAssign","highlight_start":1,"highlight_end":30},{"text":"            | Self::ShiftLeftAssign","highlight_start":1,"highlight_end":36},{"text":"            | Self::ShiftRightAssign => Associativity::RightToLeft,","highlight_start":1,"highlight_end":68},{"text":"            _ => Associativity::LeftToRight,","highlight_start":1,"highlight_end":45},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this could be a `const fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:144:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn associativity(&self) -> Associativity {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Plus\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            | Self::Minus\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"all if blocks contain the same code at the end","code":{"code":"clippy::branches_sharing_code","explanation":null},"level":"warning","spans":[{"file_name":"src/preprocessor.rs","byte_start":3875,"byte_end":3902,"line_start":69,"line_end":70,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"            String::new()","highlight_start":9,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the end suggestion probably needs some adjustments to use the expression result correctly","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::branches-sharing-code` implied by `-W clippy::nursery`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::nursery` add `#[allow(clippy::branches_sharing_code)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider moving these statements after the if","code":null,"level":"help","spans":[{"file_name":"src/preprocessor.rs","byte_start":3875,"byte_end":3902,"line_start":69,"line_end":70,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"            String::new()","highlight_start":9,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"}\n        String::new()","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: all if blocks contain the same code at the end\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/preprocessor.rs:69:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            String::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the end suggestion probably needs some adjustments to use the expression result correctly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::nursery` add `#[allow(clippy::branches_sharing_code)]`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider moving these statements after the if\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         String::new()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/ternary.rs","byte_start":4547,"byte_end":4554,"line_start":126,"line_end":126,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"            &eval::tokens_to_ast(&tokens, &mut state.current_position),","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`-W clippy::needless-borrow` implied by `-W clippy::style`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to override `-W clippy::style` add `#[allow(clippy::needless_borrow)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/ternary.rs","byte_start":4547,"byte_end":4554,"line_start":126,"line_end":126,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"            &eval::tokens_to_ast(&tokens, &mut state.current_position),","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":"tokens","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ternary.rs:126:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            &eval::tokens_to_ast(&tokens, &mut state.current_position),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::needless-borrow` implied by `-W clippy::style`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to override `-W clippy::style` add `#[allow(clippy::needless_borrow)]`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"15 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 15 warnings emitted\u001b[0m\n\n"}
